{"version":3,"file":"standalone.js","sources":["../../src/index.ts"],"sourcesContent":["export type Timeout = ReturnType<typeof setTimeout>;\nexport type Callback = () => void;\nexport type Args = unknown[];\n\n/**\n * Set a gap of time between repeated function calls.\n *\n * @param cb - Function being invoked\n * @param rate - Time, in milliseconds, between callback firings.\n * @returns Callback function, {@link rate}-spaced.\n *\n * @example\n * Best used for things like `mousemove` events.\n * ```\n * const handler = (evt)=>{console.log(evt);}\n * const throttledHandler = throttle(handler, 100);\n * document.body.addEventListener('mousemove', throttledHandler)\n * ```\n * @public\n */\nexport function throttle(cb: Callback, rate = 1000) {\n  let timeout: Timeout;\n\n  return (...args: Args) => {\n    if (!timeout) {\n      cb.call(null, ...args);\n\n      timeout = setTimeout(() => {\n        timeout = null;\n      }, rate);\n    }\n  };\n}\n\nexport function debounce(cb: Callback, rate = 1000) {\n  let timeout: Timeout;\n\n  return (...args: Args) => {\n    clearTimeout(timeout);\n\n    timeout = setTimeout(() => {\n      cb.call(null, ...args);\n    }, rate);\n  };\n}\n"],"names":["throttle","cb","timeout","rate","arguments","length","undefined","_len","args","Array","_key","call","setTimeout","debounce","_len2","_key2","clearTimeout"],"mappings":"AAoBO,SAASA,EAASC,GAA2B,IAC9CC,EADiCC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG5C,OAAO,WACL,IAAKF,EAAS,CAAA,IAAA,IAAAK,EAAAH,UAAAC,OADLG,EAAIC,IAAAA,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAAN,UAAAM,GAEXT,EAAGU,KAAK,QAASH,GAEjBN,EAAUU,YAAW,KACnBV,EAAU,IAAI,GACbC,EACL,EAEJ,CAEO,SAASU,EAASZ,GAA2B,IAC9CC,EADiCC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG5C,OAAO,WAAmB,IAAA,IAAAU,EAAAV,UAAAC,OAAfG,EAAIC,IAAAA,MAAAK,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJP,EAAIO,GAAAX,UAAAW,GACbC,aAAad,GAEbA,EAAUU,YAAW,KACnBX,EAAGU,KAAK,QAASH,EAAK,GACrBL,GAEP"}