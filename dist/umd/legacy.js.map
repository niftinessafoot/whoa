{"version":3,"file":"legacy.js","sources":["../../src/index.ts"],"sourcesContent":["export type Timeout = ReturnType<typeof setTimeout>;\nexport type Callback = () => void;\nexport type Args = unknown[];\n\n/**\n * Set a gap of time between repeated function calls.\n *\n * @param cb - Function being invoked\n * @param rate - Time, in milliseconds, between callback firings.\n * @returns Callback function, {@link rate}-spaced.\n *\n * @example\n * Best used for things like `mousemove` events.\n * ```\n * const handler = (evt)=>{console.log(evt);}\n * const throttledHandler = throttle(handler, 100);\n * document.body.addEventListener('mousemove', throttledHandler)\n * ```\n * @public\n */\nexport function throttle(cb: Callback, rate = 1000) {\n  let timeout: Timeout;\n\n  return (...args: Args) => {\n    if (!timeout) {\n      cb.call(null, ...args);\n\n      timeout = setTimeout(() => {\n        timeout = null;\n      }, rate);\n    }\n  };\n}\n\nexport function debounce(cb: Callback, rate = 1000) {\n  let timeout: Timeout;\n\n  return (...args: Args) => {\n    clearTimeout(timeout);\n\n    timeout = setTimeout(() => {\n      cb.call(null, ...args);\n    }, rate);\n  };\n}\n"],"names":["cb","timeout","rate","arguments","length","undefined","_len2","args","Array","_key2","clearTimeout","setTimeout","call","apply","concat","_len","_key"],"mappings":";8UAkCO,SAAkBA,GAA2B,IAC9CC,EADiCC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG5C,OAAO,WAAmB,IAAA,IAAAG,EAAAH,UAAAC,OAAfG,EAAIC,IAAAA,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAAN,UAAAM,GACbC,aAAaT,GAEbA,EAAUU,YAAW,WACnBX,EAAGY,KAAIC,MAAPb,EAAQ,CAAA,MAAIc,OAAKP,GAClB,GAAEL,GAEP,aAxBO,SAAkBF,GAA2B,IAC9CC,EADiCC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG5C,OAAO,WACL,IAAKF,EAAS,CAAA,IAAA,IAAAc,EAAAZ,UAAAC,OADLG,EAAIC,IAAAA,MAAAO,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJT,EAAIS,GAAAb,UAAAa,GAEXhB,EAAGY,KAAIC,MAAPb,EAAQ,CAAA,MAAIc,OAAKP,IAEjBN,EAAUU,YAAW,WACnBV,EAAU,IACX,GAAEC,EACL,EAEJ,CAYA"}